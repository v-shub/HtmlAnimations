@using System.Net.Http.Headers;
@using System.Net;
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navManager
@using Microsoft.AspNetCore.Components.Routing;
@using Microsoft.AspNetCore.Components.Authorization;
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly" OnNavigateAsync="OnNavigateAsync">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <PageTitle>Unauthorized</PageTitle>
                    <h1>Unauthorized</h1>
                    <lottie-player src="https://lottie.host/8e95f071-0e23-43f1-8cf3-e15e1a528787/e43Sne4uRG.json" background="transparent" speed="1" style="width: 500px; height: 500px;" loop autoplay></lottie-player>
                </NotAuthorized>
                <Authorizing>
                    Авторизация...
                </Authorizing>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <lottie-player src="https://lottie.host/325b0472-360e-4ef8-beaf-789ebe80c770/lKNc5GknKz.json" background="transparent" speed="1" style="width: 500px; height: 500px;" loop autoplay></lottie-player>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    HttpClient httpClient = new HttpClient();
    //await NavigateToErrorPage();
    protected async Task OnNavigateAsync(NavigationContext context)
    {
        /*string requestUri = "https://localhost:7255/";
        var response = await httpClient.GetAsync(requestUri);
        if (response != null&& !response.IsSuccessStatusCode)
        {
            string pageAddress = "/";
            switch (response.StatusCode)
            {
                case HttpStatusCode.BadRequest:
                    pageAddress += "400";
                    break;
                case HttpStatusCode.Unauthorized:
                    pageAddress += "401";
                    break;
                case HttpStatusCode.PaymentRequired:
                    pageAddress += "402";
                    break;
                case HttpStatusCode.Forbidden:
                    pageAddress += "403";
                    break;
                case HttpStatusCode.NotFound:
                    pageAddress += "404";
                    break;
                case HttpStatusCode.MethodNotAllowed:
                    pageAddress += "405";
                    break;
                case HttpStatusCode.NotImplemented:
                    pageAddress += "501";
                    break;
                case HttpStatusCode.BadGateway:
                    pageAddress += "502";
                    break;
                case HttpStatusCode.ServiceUnavailable:
                    pageAddress += "503";
                    break;
                default:
                    pageAddress += "500";
                    break;
            }
            context.CancellationToken.ThrowIfCancellationRequested();
            navManager.NavigateTo(pageAddress, false, true);
        }*/
    }
}